{
    "sourceFile": "lib/blocs/draw/draw_bloc.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1747055470183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1747055470183,
            "name": "Commit-0",
            "content": "import 'package:flutter_bloc/flutter_bloc.dart';\r\nimport 'package:drawing/blocs/draw/draw_event.dart';\r\nimport 'package:drawing/blocs/draw/draw_state.dart';\r\nimport 'package:drawing/draw/model/stroke.dart';\r\nimport 'package:drawing/draw/model/offset.dart';\r\nimport 'package:hive/hive.dart';\r\n\r\nclass DrawBloc extends Bloc<DrawEvent, DrawState> {\r\n  final Box<Map<dynamic, dynamic>> drawingBox;\r\n\r\n  DrawBloc({required this.drawingBox}) : super(const DrawInitial()) {\r\n    on<StartDrawing>(_onStartDrawing);\r\n    on<Drawing>(_onDrawing);\r\n    on<EndDrawing>(_onEndDrawing);\r\n    on<ChangeColor>(_onChangeColor);\r\n    on<ChangeStrokeWidth>(_onChangeStrokeWidth);\r\n    on<Undo>(_onUndo);\r\n    on<Redo>(_onRedo);\r\n    on<ClearCanvas>(_onClearCanvas);\r\n    on<SaveDrawing>(_onSaveDrawing);\r\n  }\r\n\r\n  void _onStartDrawing(StartDrawing event, Emitter<DrawState> emit) {\r\n    if (state is DrawInitial) {\r\n      emit(DrawingInProgress(\r\n        strokes: [],\r\n        redoStrokes: [],\r\n        currentColor: event.color,\r\n        strokeWidth: event.strokeWidth,\r\n        isDrawing: true,\r\n      ));\r\n    } else if (state is DrawingInProgress) {\r\n      final currentState = state as DrawingInProgress;\r\n      final newStroke = Stroke(\r\n        points: [OffsetCustom(event.position.dx, event.position.dy)],\r\n        color: event.color,\r\n        strokeWidth: event.strokeWidth,\r\n      );\r\n      \r\n      emit(currentState.copyWith(\r\n        strokes: [...currentState.strokes, newStroke],\r\n        isDrawing: true,\r\n      ));\r\n    }\r\n  }\r\n\r\n  void _onDrawing(Drawing event, Emitter<DrawState> emit) {\r\n    if (state is DrawingInProgress) {\r\n      final currentState = state as DrawingInProgress;\r\n      if (currentState.isDrawing && currentState.strokes.isNotEmpty) {\r\n        final lastStroke = currentState.strokes.last;\r\n        final updatedStroke = Stroke(\r\n          points: [...lastStroke.points, OffsetCustom(event.position.dx, event.position.dy)],\r\n          color: lastStroke.color,\r\n          strokeWidth: lastStroke.strokeWidth,\r\n        );\r\n        \r\n        final updatedStrokes = [...currentState.strokes];\r\n        updatedStrokes[updatedStrokes.length - 1] = updatedStroke;\r\n        \r\n        emit(currentState.copyWith(strokes: updatedStrokes));\r\n      }\r\n    }\r\n  }\r\n\r\n  void _onEndDrawing(EndDrawing event, Emitter<DrawState> emit) {\r\n    if (state is DrawingInProgress) {\r\n      final currentState = state as DrawingInProgress;\r\n      emit(currentState.copyWith(isDrawing: false));\r\n    }\r\n  }\r\n\r\n  void _onChangeColor(ChangeColor event, Emitter<DrawState> emit) {\r\n    if (state is DrawingInProgress) {\r\n      final currentState = state as DrawingInProgress;\r\n      emit(currentState.copyWith(currentColor: event.color));\r\n    }\r\n  }\r\n\r\n  void _onChangeStrokeWidth(ChangeStrokeWidth event, Emitter<DrawState> emit) {\r\n    if (state is DrawingInProgress) {\r\n      final currentState = state as DrawingInProgress;\r\n      emit(currentState.copyWith(strokeWidth: event.strokeWidth));\r\n    }\r\n  }\r\n\r\n  void _onUndo(Undo event, Emitter<DrawState> emit) {\r\n    if (state is DrawingInProgress) {\r\n      final currentState = state as DrawingInProgress;\r\n      if (currentState.strokes.isNotEmpty) {\r\n        final lastStroke = currentState.strokes.last;\r\n        final updatedStrokes = currentState.strokes.sublist(0, currentState.strokes.length - 1);\r\n        final updatedRedoStrokes = [...currentState.redoStrokes, lastStroke];\r\n        \r\n        emit(currentState.copyWith(\r\n          strokes: updatedStrokes,\r\n          redoStrokes: updatedRedoStrokes,\r\n        ));\r\n      }\r\n    }\r\n  }\r\n\r\n  void _onRedo(Redo event, Emitter<DrawState> emit) {\r\n    if (state is DrawingInProgress) {\r\n      final currentState = state as DrawingInProgress;\r\n      if (currentState.redoStrokes.isNotEmpty) {\r\n        final lastRedoStroke = currentState.redoStrokes.last;\r\n        final updatedStrokes = [...currentState.strokes, lastRedoStroke];\r\n        final updatedRedoStrokes = currentState.redoStrokes.sublist(0, currentState.redoStrokes.length - 1);\r\n        \r\n        emit(currentState.copyWith(\r\n          strokes: updatedStrokes,\r\n          redoStrokes: updatedRedoStrokes,\r\n        ));\r\n      }\r\n    }\r\n  }\r\n\r\n  void _onClearCanvas(ClearCanvas event, Emitter<DrawState> emit) {\r\n    if (state is DrawingInProgress) {\r\n      final currentState = state as DrawingInProgress;\r\n      emit(currentState.copyWith(\r\n        strokes: [],\r\n        redoStrokes: [],\r\n      ));\r\n    }\r\n  }\r\n\r\n  Future<void> _onSaveDrawing(SaveDrawing event, Emitter<DrawState> emit) async {\r\n    if (state is DrawingInProgress) {\r\n      final currentState = state as DrawingInProgress;\r\n      try {\r\n        final drawingData = {\r\n          'name': event.name,\r\n          'strokes': currentState.strokes.map((stroke) => stroke.toJson()).toList(),\r\n          'timestamp': DateTime.now().toIso8601String(),\r\n        };\r\n        \r\n        await drawingBox.add(drawingData);\r\n        emit(DrawingSaved(message: 'Drawing saved successfully'));\r\n      } catch (e) {\r\n        emit(DrawingError(message: 'Failed to save drawing: $e'));\r\n      }\r\n    }\r\n  }\r\n} "
        }
    ]
}