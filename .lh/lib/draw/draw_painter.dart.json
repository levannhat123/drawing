{
    "sourceFile": "lib/draw/draw_painter.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1746626157263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746626375833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,39 @@\n+import 'package:drawing/draw/model/stroke.dart';\r\n+import 'package:flutter/material.dart';\r\n+\r\n+class DrawPainter extends CustomPainter {\r\n+  final List<Stroke> strokes;\r\n+  final List<Offset> currentPoints;\r\n+  final double brushSize;\r\n+  final Color selectedColor;\r\n+\r\n+  DrawPainter(\r\n+      this.strokes, this.currentPoints, this.brushSize, this.selectedColor);\r\n+\r\n+  @override\r\n+  void paint(Canvas canvas, Size size) {\r\n+    for (var stroke in strokes) {\r\n+      Paint paint = Paint()\r\n+        ..color = stroke.color\r\n+        ..strokeCap = StrokeCap.round\r\n+        ..strokeWidth = stroke.brushSize;\r\n+\r\n+      for (int i = 0; i < stroke.points.length - 1; i++) {\r\n+        canvas.drawLine(stroke.points[i], stroke.points[i + 1], paint);\r\n+      }\r\n+      canvas.drawPoints(PointMode.polygon, stroke.points, paint);\r\n+    }\r\n+    if (currentPoints.isNotEmpty) {\r\n+      Paint paint = Paint()\r\n+        ..color = selectedColor\r\n+        ..strokeCap = StrokeCap.round\r\n+        ..strokeWidth = brushSize;\r\n+      canvas.drawPoints(PointMode.polygon, currentPoints, paint);\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  bool shouldRepaint(covariant CustomPainter oldDelegate) {\r\n+    return true;\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746626445738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,11 @@\n         ..strokeCap = StrokeCap.round\r\n         ..strokeWidth = stroke.brushSize;\r\n \r\n       for (int i = 0; i < stroke.points.length - 1; i++) {\r\n+        if (stroke.points[i].dx == 0 && stroke.points[i].dy == 0) {\r\n+          continue;\r\n+        }\r\n         canvas.drawLine(stroke.points[i], stroke.points[i + 1], paint);\r\n       }\r\n       canvas.drawPoints(PointMode.polygon, stroke.points, paint);\r\n     }\r\n"
                },
                {
                    "date": 1746626451956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,42 @@\n+import 'package:drawing/draw/model/stroke.dart';\r\n+import 'package:flutter/material.dart';\r\n+\r\n+class DrawPainter extends CustomPainter {\r\n+  final List<Stroke> strokes;\r\n+  final List<Offset> currentPoints;\r\n+  final double brushSize;\r\n+  final Color selectedColor;\r\n+\r\n+  DrawPainter(\r\n+      this.strokes, this.currentPoints, this.brushSize, this.selectedColor);\r\n+\r\n+  @override\r\n+  void paint(Canvas canvas, Size size) {\r\n+    for (var stroke in strokes) {\r\n+      Paint paint = Paint()\r\n+        ..color = stroke.color\r\n+        ..strokeCap = StrokeCap.round\r\n+        ..strokeWidth = stroke.brushSize;\r\n+\r\n+      for (int i = 0; i < stroke.points.length - 1; i++) {\r\n+        if (stroke.points[i].dx == 0 && stroke.points[i].dy == 0) {\r\n+          continue;\r\n+        }\r\n+        canvas.drawLine(stroke.points[i], stroke.points[i + 1], paint);\r\n+      }\r\n+      // canvas.drawPoints(PointMode.polygon, stroke.points, paint);\r\n+    }\r\n+    if (currentPoints.isNotEmpty) {\r\n+      Paint paint = Paint()\r\n+        ..color = selectedColor\r\n+        ..strokeCap = StrokeCap.round\r\n+        ..strokeWidth = brushSize;\r\n+      // canvas.drawPoints(PointMode.polygon, currentPoints, paint);\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  bool shouldRepaint(covariant CustomPainter oldDelegate) {\r\n+    return true;\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746626508812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,43 @@\n+import 'package:drawing/draw/model/stroke.dart';\r\n+import 'package:flutter/material.dart';\r\n+\r\n+class DrawPainter extends CustomPainter {\r\n+  final List<Stroke> strokes;\r\n+  final List<Offset> currentPoints;\r\n+  final double brushSize;\r\n+  final Color selectedColor;\r\n+\r\n+  DrawPainter(\r\n+      this.strokes, this.currentPoints, this.brushSize, this.selectedColor);\r\n+\r\n+  @override\r\n+  void paint(Canvas canvas, Size size) {\r\n+    for (var stroke in strokes) {\r\n+      Paint paint = Paint()\r\n+        ..color = stroke.color\r\n+        ..strokeCap = StrokeCap.round\r\n+        ..strokeWidth = stroke.brushSize;\r\n+\r\n+      for (int i = 0; i < stroke.points.length - 1; i++) {\r\n+        if (stroke.points[i] != Offset.zero &&\r\n+            stroke.points[i + 1] != Offset.zero) {\r\n+          continue;\r\n+        }\r\n+        canvas.drawLine(stroke.points[i], stroke.points[i + 1], paint);\r\n+      }\r\n+      // canvas.drawPoints(PointMode.polygon, stroke.points, paint);\r\n+    }\r\n+    if (currentPoints.isNotEmpty) {\r\n+      Paint paint = Paint()\r\n+        ..color = selectedColor\r\n+        ..strokeCap = StrokeCap.round\r\n+        ..strokeWidth = brushSize;\r\n+      // canvas.drawPoints(PointMode.polygon, currentPoints, paint);\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  bool shouldRepaint(covariant CustomPainter oldDelegate) {\r\n+    return true;\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746626527327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,42 @@\n+import 'package:drawing/draw/model/stroke.dart';\r\n+import 'package:flutter/material.dart';\r\n+\r\n+class DrawPainter extends CustomPainter {\r\n+  final List<Stroke> strokes;\r\n+  final List<Offset> currentPoints;\r\n+  final double brushSize;\r\n+  final Color selectedColor;\r\n+\r\n+  DrawPainter(\r\n+      this.strokes, this.currentPoints, this.brushSize, this.selectedColor);\r\n+\r\n+  @override\r\n+  void paint(Canvas canvas, Size size) {\r\n+    for (var stroke in strokes) {\r\n+      Paint paint = Paint()\r\n+        ..color = stroke.color\r\n+        ..strokeCap = StrokeCap.round\r\n+        ..strokeWidth = stroke.brushSize;\r\n+\r\n+      for (int i = 0; i < stroke.points.length - 1; i++) {\r\n+        if (stroke.points[i] != Offset.zero &&\r\n+            stroke.points[i + 1] != Offset.zero) {\r\n+          canvas.drawLine(stroke.points[i], stroke.points[i + 1], paint);\r\n+        }\r\n+      }\r\n+      // canvas.drawPoints(PointMode.polygon, stroke.points, paint);\r\n+    }\r\n+    if (currentPoints.isNotEmpty) {\r\n+      Paint paint = Paint()\r\n+        ..color = selectedColor\r\n+        ..strokeCap = StrokeCap.round\r\n+        ..strokeWidth = brushSize;\r\n+      // canvas.drawPoints(PointMode.polygon, currentPoints, paint);\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  bool shouldRepaint(covariant CustomPainter oldDelegate) {\r\n+    return true;\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746626575074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,182 +23,12 @@\n             stroke.points[i + 1] != Offset.zero) {\r\n           canvas.drawLine(stroke.points[i], stroke.points[i + 1], paint);\r\n         }\r\n       }\r\n-      // canvas.drawPoints(PointMode.polygon, stroke.points, paint);\r\n     }\r\n-    if (currentPoints.isNotEmpty) {\r\n-      Paint paint = Paint()\r\n-        ..color = selectedColor\r\n-        ..strokeCap = StrokeCap.round\r\n-        ..strokeWidth = brushSize;\r\n-      // canvas.drawPoints(PointMode.polygon, currentPoints, paint);\r\n-    }\r\n   }\r\n \r\n   @override\r\n   bool shouldRepaint(covariant CustomPainter oldDelegate) {\r\n     return true;\r\n   }\r\n }\r\n-import 'package:drawing/draw/model/stroke.dart';\r\n-import 'package:flutter/material.dart';\r\n-\r\n-class DrawPainter extends CustomPainter {\r\n-  final List<Stroke> strokes;\r\n-  final List<Offset> currentPoints;\r\n-  final double brushSize;\r\n-  final Color selectedColor;\r\n-\r\n-  DrawPainter(\r\n-      this.strokes, this.currentPoints, this.brushSize, this.selectedColor);\r\n-\r\n-  @override\r\n-  void paint(Canvas canvas, Size size) {\r\n-    for (var stroke in strokes) {\r\n-      Paint paint = Paint()\r\n-        ..color = stroke.color\r\n-        ..strokeCap = StrokeCap.round\r\n-        ..strokeWidth = stroke.brushSize;\r\n-\r\n-      for (int i = 0; i < stroke.points.length - 1; i++) {\r\n-        if (stroke.points[i] != Offset.zero &&\r\n-            stroke.points[i + 1] != Offset.zero) {\r\n-          continue;\r\n-        }\r\n-        canvas.drawLine(stroke.points[i], stroke.points[i + 1], paint);\r\n-      }\r\n-      // canvas.drawPoints(PointMode.polygon, stroke.points, paint);\r\n-    }\r\n-    if (currentPoints.isNotEmpty) {\r\n-      Paint paint = Paint()\r\n-        ..color = selectedColor\r\n-        ..strokeCap = StrokeCap.round\r\n-        ..strokeWidth = brushSize;\r\n-      // canvas.drawPoints(PointMode.polygon, currentPoints, paint);\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  bool shouldRepaint(covariant CustomPainter oldDelegate) {\r\n-    return true;\r\n-  }\r\n-}\r\n-import 'package:drawing/draw/model/stroke.dart';\r\n-import 'package:flutter/material.dart';\r\n-\r\n-class DrawPainter extends CustomPainter {\r\n-  final List<Stroke> strokes;\r\n-  final List<Offset> currentPoints;\r\n-  final double brushSize;\r\n-  final Color selectedColor;\r\n-\r\n-  DrawPainter(\r\n-      this.strokes, this.currentPoints, this.brushSize, this.selectedColor);\r\n-\r\n-  @override\r\n-  void paint(Canvas canvas, Size size) {\r\n-    for (var stroke in strokes) {\r\n-      Paint paint = Paint()\r\n-        ..color = stroke.color\r\n-        ..strokeCap = StrokeCap.round\r\n-        ..strokeWidth = stroke.brushSize;\r\n-\r\n-      for (int i = 0; i < stroke.points.length - 1; i++) {\r\n-        if (stroke.points[i].dx == 0 && stroke.points[i].dy == 0) {\r\n-          continue;\r\n-        }\r\n-        canvas.drawLine(stroke.points[i], stroke.points[i + 1], paint);\r\n-      }\r\n-      // canvas.drawPoints(PointMode.polygon, stroke.points, paint);\r\n-    }\r\n-    if (currentPoints.isNotEmpty) {\r\n-      Paint paint = Paint()\r\n-        ..color = selectedColor\r\n-        ..strokeCap = StrokeCap.round\r\n-        ..strokeWidth = brushSize;\r\n-      // canvas.drawPoints(PointMode.polygon, currentPoints, paint);\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  bool shouldRepaint(covariant CustomPainter oldDelegate) {\r\n-    return true;\r\n-  }\r\n-}\r\n-import 'package:drawing/draw/model/stroke.dart';\r\n-import 'package:flutter/material.dart';\r\n-\r\n-class DrawPainter extends CustomPainter {\r\n-  final List<Stroke> strokes;\r\n-  final List<Offset> currentPoints;\r\n-  final double brushSize;\r\n-  final Color selectedColor;\r\n-\r\n-  DrawPainter(\r\n-      this.strokes, this.currentPoints, this.brushSize, this.selectedColor);\r\n-\r\n-  @override\r\n-  void paint(Canvas canvas, Size size) {\r\n-    for (var stroke in strokes) {\r\n-      Paint paint = Paint()\r\n-        ..color = stroke.color\r\n-        ..strokeCap = StrokeCap.round\r\n-        ..strokeWidth = stroke.brushSize;\r\n-\r\n-      for (int i = 0; i < stroke.points.length - 1; i++) {\r\n-        if (stroke.points[i].dx == 0 && stroke.points[i].dy == 0) {\r\n-          continue;\r\n-        }\r\n-        canvas.drawLine(stroke.points[i], stroke.points[i + 1], paint);\r\n-      }\r\n-      canvas.drawPoints(PointMode.polygon, stroke.points, paint);\r\n-    }\r\n-    if (currentPoints.isNotEmpty) {\r\n-      Paint paint = Paint()\r\n-        ..color = selectedColor\r\n-        ..strokeCap = StrokeCap.round\r\n-        ..strokeWidth = brushSize;\r\n-      canvas.drawPoints(PointMode.polygon, currentPoints, paint);\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  bool shouldRepaint(covariant CustomPainter oldDelegate) {\r\n-    return true;\r\n-  }\r\n-}\r\n-import 'package:drawing/draw/model/stroke.dart';\r\n-import 'package:flutter/material.dart';\r\n-\r\n-class DrawPainter extends CustomPainter {\r\n-  final List<Stroke> strokes;\r\n-  final List<Offset> currentPoints;\r\n-  final double brushSize;\r\n-  final Color selectedColor;\r\n-\r\n-  DrawPainter(\r\n-      this.strokes, this.currentPoints, this.brushSize, this.selectedColor);\r\n-\r\n-  @override\r\n-  void paint(Canvas canvas, Size size) {\r\n-    for (var stroke in strokes) {\r\n-      Paint paint = Paint()\r\n-        ..color = stroke.color\r\n-        ..strokeCap = StrokeCap.round\r\n-        ..strokeWidth = stroke.brushSize;\r\n-      canvas.drawPoints(PointMode.polygon, stroke.points, paint);\r\n-    }\r\n-    if (currentPoints.isNotEmpty) {\r\n-      Paint paint = Paint()\r\n-        ..color = selectedColor\r\n-        ..strokeCap = StrokeCap.round\r\n-        ..strokeWidth = brushSize;\r\n-      canvas.drawPoints(PointMode.polygon, currentPoints, paint);\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  bool shouldRepaint(covariant CustomPainter oldDelegate) {\r\n-    return true;\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1746626642550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+import 'package:drawing/draw/model/stroke.dart';\r\n+import 'package:flutter/material.dart';\r\n+\r\n+class DrawPainter extends CustomPainter {\r\n+  final List<Stroke> strokes;\r\n+  final List<Offset> currentPoints;\r\n+  final double brushSize;\r\n+  final Color selectedColor;\r\n+\r\n+  DrawPainter(\r\n+      this.strokes, this.currentPoints, this.brushSize, this.selectedColor);\r\n+\r\n+  @override\r\n+  void paint(Canvas canvas, Size size) {\r\n+    for (var stroke in strokes) {\r\n+      Paint paint = Paint()\r\n+        ..color = stroke.color\r\n+        ..strokeCap = StrokeCap.round\r\n+        ..strokeWidth = stroke.brushSize;\r\n+\r\n+      for (int i = 0; i < stroke.points.length - 1; i++) {\r\n+        if (stroke.points[i] != Offset.zero &&\r\n+            stroke.points[i + 1] != Offset.zero) {\r\n+          canvas.drawLine(stroke.points[i], stroke.points[i + 1], paint);\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  bool shouldRepaint(covariant CustomPainter oldDelegate) {\r\n+    return true;\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1746626801034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,20 @@\n           canvas.drawLine(stroke.points[i], stroke.points[i + 1], paint);\r\n         }\r\n       }\r\n     }\r\n+\r\n+     Paint paint = Paint()\r\n+        ..color = strokes.color\r\n+        ..strokeCap = StrokeCap.round\r\n+        ..strokeWidth = stroke.brushSize;\r\n+\r\n+      for (int i = 0; i < stroke.points.length - 1; i++) {\r\n+        if (stroke.points[i] != Offset.zero &&\r\n+            stroke.points[i + 1] != Offset.zero) {\r\n+          canvas.drawLine(stroke.points[i], stroke.points[i + 1], paint);\r\n+        }\r\n+      }\r\n   }\r\n \r\n   @override\r\n   bool shouldRepaint(covariant CustomPainter oldDelegate) {\r\n"
                },
                {
                    "date": 1746627015257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,46 +1,46 @@\n-import 'package:drawing/draw/model/stroke.dart';\r\n-import 'package:flutter/material.dart';\r\n+// import 'package:drawing/draw/model/stroke.dart';\r\n+// import 'package:flutter/material.dart';\r\n \r\n-class DrawPainter extends CustomPainter {\r\n-  final List<Stroke> strokes;\r\n-  final List<Offset> currentPoints;\r\n-  final double brushSize;\r\n-  final Color selectedColor;\r\n+// class DrawPainter extends CustomPainter {\r\n+//   final List<Stroke> strokes;\r\n+//   final List<Offset> currentPoints;\r\n+//   final double brushSize;\r\n+//   final Color selectedColor;\r\n \r\n-  DrawPainter(\r\n-      this.strokes, this.currentPoints, this.brushSize, this.selectedColor);\r\n+//   DrawPainter(\r\n+//       this.strokes, this.currentPoints, this.brushSize, this.selectedColor);\r\n \r\n-  @override\r\n-  void paint(Canvas canvas, Size size) {\r\n-    for (var stroke in strokes) {\r\n-      Paint paint = Paint()\r\n-        ..color = stroke.color\r\n-        ..strokeCap = StrokeCap.round\r\n-        ..strokeWidth = stroke.brushSize;\r\n+//   @override\r\n+//   void paint(Canvas canvas, Size size) {\r\n+//     for (var stroke in strokes) {\r\n+//       Paint paint = Paint()\r\n+//         ..color = stroke.color\r\n+//         ..strokeCap = StrokeCap.round\r\n+//         ..strokeWidth = stroke.brushSize;\r\n \r\n-      for (int i = 0; i < stroke.points.length - 1; i++) {\r\n-        if (stroke.points[i] != Offset.zero &&\r\n-            stroke.points[i + 1] != Offset.zero) {\r\n-          canvas.drawLine(stroke.points[i], stroke.points[i + 1], paint);\r\n-        }\r\n-      }\r\n-    }\r\n+//       for (int i = 0; i < stroke.points.length - 1; i++) {\r\n+//         if (stroke.points[i] != Offset.zero &&\r\n+//             stroke.points[i + 1] != Offset.zero) {\r\n+//           canvas.drawLine(stroke.points[i], stroke.points[i + 1], paint);\r\n+//         }\r\n+//       }\r\n+//     }\r\n \r\n-    Paint paint = Paint()\r\n-      ..color = strokes.color\r\n-      ..strokeCap = StrokeCap.round\r\n-      ..strokeWidth = stroke.brushSize;\r\n+//     Paint paint = Paint()\r\n+//       ..color = strokes.color\r\n+//       ..strokeCap = StrokeCap.round\r\n+//       ..strokeWidth = stroke.brushSize;\r\n \r\n-    for (int i = 0; i < stroke.points.length - 1; i++) {\r\n-      if (stroke.points[i] != Offset.zero &&\r\n-          stroke.points[i + 1] != Offset.zero) {\r\n-        canvas.drawLine(stroke.points[i], stroke.points[i + 1], paint);\r\n-      }\r\n-    }\r\n-  }\r\n+//     for (int i = 0; i < stroke.points.length - 1; i++) {\r\n+//       if (stroke.points[i] != Offset.zero &&\r\n+//           stroke.points[i + 1] != Offset.zero) {\r\n+//         canvas.drawLine(stroke.points[i], stroke.points[i + 1], paint);\r\n+//       }\r\n+//     }\r\n+//   }\r\n \r\n-  @override\r\n-  bool shouldRepaint(covariant CustomPainter oldDelegate) {\r\n-    return true;\r\n-  }\r\n-}\r\n+//   @override\r\n+//   bool shouldRepaint(covariant CustomPainter oldDelegate) {\r\n+//     return true;\r\n+//   }\r\n+// }\r\n"
                },
                {
                    "date": 1746627324079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,46 +1,46 @@\n-// import 'package:drawing/draw/model/stroke.dart';\r\n-// import 'package:flutter/material.dart';\r\n+import 'package:drawing/draw/model/stroke.dart';\r\n+import 'package:flutter/material.dart';\r\n \r\n-// class DrawPainter extends CustomPainter {\r\n-//   final List<Stroke> strokes;\r\n-//   final List<Offset> currentPoints;\r\n-//   final double brushSize;\r\n-//   final Color selectedColor;\r\n+class DrawPainter extends CustomPainter {\r\n+  final List<Stroke> strokes;\r\n+  final List<Offset> currentPoints;\r\n+  final double brushSize;\r\n+  final Color selectedColor;\r\n \r\n-//   DrawPainter(\r\n-//       this.strokes, this.currentPoints, this.brushSize, this.selectedColor);\r\n+  DrawPainter(\r\n+      this.strokes, this.currentPoints, this.brushSize, this.selectedColor);\r\n \r\n-//   @override\r\n-//   void paint(Canvas canvas, Size size) {\r\n-//     for (var stroke in strokes) {\r\n-//       Paint paint = Paint()\r\n-//         ..color = stroke.color\r\n-//         ..strokeCap = StrokeCap.round\r\n-//         ..strokeWidth = stroke.brushSize;\r\n+  @override\r\n+  void paint(Canvas canvas, Size size) {\r\n+    for (var stroke in strokes) {\r\n+      Paint paint = Paint()\r\n+        ..color = stroke.color\r\n+        ..strokeCap = StrokeCap.round\r\n+        ..strokeWidth = stroke.brushSize;\r\n \r\n-//       for (int i = 0; i < stroke.points.length - 1; i++) {\r\n-//         if (stroke.points[i] != Offset.zero &&\r\n-//             stroke.points[i + 1] != Offset.zero) {\r\n-//           canvas.drawLine(stroke.points[i], stroke.points[i + 1], paint);\r\n-//         }\r\n-//       }\r\n-//     }\r\n+      for (int i = 0; i < stroke.points.length - 1; i++) {\r\n+        if (stroke.points[i] != Offset.zero &&\r\n+            stroke.points[i + 1] != Offset.zero) {\r\n+          canvas.drawLine(stroke.points[i], stroke.points[i + 1], paint);\r\n+        }\r\n+      }\r\n+    }\r\n \r\n-//     Paint paint = Paint()\r\n-//       ..color = strokes.color\r\n-//       ..strokeCap = StrokeCap.round\r\n-//       ..strokeWidth = stroke.brushSize;\r\n+    Paint paint = Paint()\r\n+      ..color = selectedColor\r\n+      ..strokeCap = StrokeCap.round\r\n+      ..strokeWidth = brushSize;\r\n \r\n-//     for (int i = 0; i < stroke.points.length - 1; i++) {\r\n-//       if (stroke.points[i] != Offset.zero &&\r\n-//           stroke.points[i + 1] != Offset.zero) {\r\n-//         canvas.drawLine(stroke.points[i], stroke.points[i + 1], paint);\r\n-//       }\r\n-//     }\r\n-//   }\r\n+    for (int i = 0; i < currentPoints.length - 1; i++) {\r\n+      if (currentPoints[i] != Offset.zero &&\r\n+          currentPoints[i + 1] != Offset.zero) {\r\n+        canvas.drawLine(currentPoints[i], currentPoints[i + 1], paint);\r\n+      }\r\n+    }\r\n+  }\r\n \r\n-//   @override\r\n-//   bool shouldRepaint(covariant CustomPainter oldDelegate) {\r\n-//     return true;\r\n-//   }\r\n-// }\r\n+  @override\r\n+  bool shouldRepaint(covariant CustomPainter oldDelegate) {\r\n+    return true;\r\n+  }\r\n+}\r\n"
                }
            ],
            "date": 1746626157263,
            "name": "Commit-0",
            "content": "import 'package:drawing/draw/model/stroke.dart';\r\nimport 'package:flutter/material.dart';\r\n\r\nclass DrawPainter extends CustomPainter {\r\n  final List<Stroke> strokes;\r\n  final List<Offset> currentPoints;\r\n  final double brushSize;\r\n  final Color selectedColor;\r\n\r\n  DrawPainter(\r\n      this.strokes, this.currentPoints, this.brushSize, this.selectedColor);\r\n\r\n  @override\r\n  void paint(Canvas canvas, Size size) {\r\n    for (var stroke in strokes) {\r\n      Paint paint = Paint()\r\n        ..color = stroke.color\r\n        ..strokeCap = StrokeCap.round\r\n        ..strokeWidth = stroke.brushSize;\r\n      canvas.drawPoints(PointMode.polygon, stroke.points, paint);\r\n    }\r\n    if (currentPoints.isNotEmpty) {\r\n      Paint paint = Paint()\r\n        ..color = selectedColor\r\n        ..strokeCap = StrokeCap.round\r\n        ..strokeWidth = brushSize;\r\n      canvas.drawPoints(PointMode.polygon, currentPoints, paint);\r\n    }\r\n  }\r\n\r\n  @override\r\n  bool shouldRepaint(covariant CustomPainter oldDelegate) {\r\n    return true;\r\n  }\r\n}\r\n"
        }
    ]
}