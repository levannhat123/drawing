{
    "sourceFile": "lib/bloc/draw/draw_state.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1747314328408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747315922578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,8 @@\n part of 'draw_bloc.dart';\n \n-import 'package:equatable/equatable.dart';\n-import 'package:flutter/material.dart';\n-import 'package:drawing/draw/model/stroke.dart';\n-import 'package:drawing/draw/model/shape.dart';\n \n+\n class DrawState extends Equatable {\n   final List<Stroke> strokes;\n   final List<Shape> shapes;\n   final List<Offset> currentPoints;\n"
                },
                {
                    "date": 1747316368332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,91 +1,94 @@\n-part of 'draw_bloc.dart';\n+import 'package:equatable/equatable.dart';\n+import 'package:flutter/material.dart';\n+import 'package:drawing/draw/model/stroke.dart';\n+import 'package:drawing/draw/model/shape.dart';\n \n class DrawState extends Equatable {\n   final List<Stroke> strokes;\n   final List<Shape> shapes;\n+  final List<Stroke> redoStrokes;\n+  final List<Shape> redoShapes;\n   final List<Offset> currentPoints;\n   final double brushSize;\n   final Color selectedColor;\n   final bool isErasing;\n   final ShapeType? selectedShapeType;\n   final Offset? startPoint;\n   final Offset? endPoint;\n   final bool isDrawingShape;\n-  final List<Stroke> redoStrokes;\n-  final List<Shape> redoShapes;\n   final String? drawingName;\n   final bool isLoading;\n   final String? message;\n \n   const DrawState({\n     this.strokes = const [],\n     this.shapes = const [],\n+    this.redoStrokes = const [],\n+    this.redoShapes = const [],\n     this.currentPoints = const [],\n-    this.brushSize = 3.0,\n+    this.brushSize = 4.0,\n     this.selectedColor = Colors.black,\n     this.isErasing = false,\n     this.selectedShapeType,\n     this.startPoint,\n     this.endPoint,\n     this.isDrawingShape = false,\n-    this.redoStrokes = const [],\n-    this.redoShapes = const [],\n     this.drawingName,\n     this.isLoading = false,\n     this.message,\n   });\n \n   DrawState copyWith({\n     List<Stroke>? strokes,\n     List<Shape>? shapes,\n+    List<Stroke>? redoStrokes,\n+    List<Shape>? redoShapes,\n     List<Offset>? currentPoints,\n     double? brushSize,\n     Color? selectedColor,\n     bool? isErasing,\n     ShapeType? selectedShapeType,\n     Offset? startPoint,\n     Offset? endPoint,\n     bool? isDrawingShape,\n-    List<Stroke>? redoStrokes,\n-    List<Shape>? redoShapes,\n     String? drawingName,\n     bool? isLoading,\n     String? message,\n   }) {\n     return DrawState(\n       strokes: strokes ?? this.strokes,\n       shapes: shapes ?? this.shapes,\n+      redoStrokes: redoStrokes ?? this.redoStrokes,\n+      redoShapes: redoShapes ?? this.redoShapes,\n       currentPoints: currentPoints ?? this.currentPoints,\n       brushSize: brushSize ?? this.brushSize,\n       selectedColor: selectedColor ?? this.selectedColor,\n       isErasing: isErasing ?? this.isErasing,\n       selectedShapeType: selectedShapeType ?? this.selectedShapeType,\n       startPoint: startPoint ?? this.startPoint,\n       endPoint: endPoint ?? this.endPoint,\n       isDrawingShape: isDrawingShape ?? this.isDrawingShape,\n-      redoStrokes: redoStrokes ?? this.redoStrokes,\n-      redoShapes: redoShapes ?? this.redoShapes,\n       drawingName: drawingName ?? this.drawingName,\n       isLoading: isLoading ?? this.isLoading,\n-      message: message ?? this.message,\n+      message: message,\n     );\n   }\n \n   @override\n   List<Object?> get props => [\n         strokes,\n         shapes,\n+        redoStrokes,\n+        redoShapes,\n         currentPoints,\n         brushSize,\n         selectedColor,\n         isErasing,\n         selectedShapeType,\n         startPoint,\n         endPoint,\n         isDrawingShape,\n-        redoStrokes,\n-        redoShapes,\n         drawingName,\n         isLoading,\n         message,\n       ];\n"
                }
            ],
            "date": 1747314328408,
            "name": "Commit-0",
            "content": "import 'package:equatable/equatable.dart';\nimport 'package:flutter/material.dart';\nimport 'package:drawing/draw/model/stroke.dart';\nimport 'package:drawing/draw/model/shape.dart';\n\nclass DrawState extends Equatable {\n  final List<Stroke> strokes;\n  final List<Shape> shapes;\n  final List<Stroke> redoStrokes;\n  final List<Shape> redoShapes;\n  final List<Offset> currentPoints;\n  final double brushSize;\n  final Color selectedColor;\n  final bool isErasing;\n  final ShapeType? selectedShapeType;\n  final Offset? startPoint;\n  final Offset? endPoint;\n  final bool isDrawingShape;\n  final String? drawingName;\n  final bool isLoading;\n  final String? message;\n\n  const DrawState({\n    this.strokes = const [],\n    this.shapes = const [],\n    this.redoStrokes = const [],\n    this.redoShapes = const [],\n    this.currentPoints = const [],\n    this.brushSize = 4.0,\n    this.selectedColor = Colors.black,\n    this.isErasing = false,\n    this.selectedShapeType,\n    this.startPoint,\n    this.endPoint,\n    this.isDrawingShape = false,\n    this.drawingName,\n    this.isLoading = false,\n    this.message,\n  });\n\n  DrawState copyWith({\n    List<Stroke>? strokes,\n    List<Shape>? shapes,\n    List<Stroke>? redoStrokes,\n    List<Shape>? redoShapes,\n    List<Offset>? currentPoints,\n    double? brushSize,\n    Color? selectedColor,\n    bool? isErasing,\n    ShapeType? selectedShapeType,\n    Offset? startPoint,\n    Offset? endPoint,\n    bool? isDrawingShape,\n    String? drawingName,\n    bool? isLoading,\n    String? message,\n  }) {\n    return DrawState(\n      strokes: strokes ?? this.strokes,\n      shapes: shapes ?? this.shapes,\n      redoStrokes: redoStrokes ?? this.redoStrokes,\n      redoShapes: redoShapes ?? this.redoShapes,\n      currentPoints: currentPoints ?? this.currentPoints,\n      brushSize: brushSize ?? this.brushSize,\n      selectedColor: selectedColor ?? this.selectedColor,\n      isErasing: isErasing ?? this.isErasing,\n      selectedShapeType: selectedShapeType ?? this.selectedShapeType,\n      startPoint: startPoint ?? this.startPoint,\n      endPoint: endPoint ?? this.endPoint,\n      isDrawingShape: isDrawingShape ?? this.isDrawingShape,\n      drawingName: drawingName ?? this.drawingName,\n      isLoading: isLoading ?? this.isLoading,\n      message: message,\n    );\n  }\n\n  @override\n  List<Object?> get props => [\n        strokes,\n        shapes,\n        redoStrokes,\n        redoShapes,\n        currentPoints,\n        brushSize,\n        selectedColor,\n        isErasing,\n        selectedShapeType,\n        startPoint,\n        endPoint,\n        isDrawingShape,\n        drawingName,\n        isLoading,\n        message,\n      ];\n}"
        }
    ]
}