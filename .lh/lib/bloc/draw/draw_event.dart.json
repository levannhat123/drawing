{
    "sourceFile": "lib/bloc/draw/draw_event.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1747314309924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747315967502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,6 @@\n part of 'draw_bloc.dart';\n \n-import 'package:equatable/equatable.dart';\n-import 'package:flutter/material.dart';\n-import 'package:drawing/draw/model/stroke.dart';\n-import 'package:drawing/draw/model/shape.dart';\n \n abstract class DrawEvent extends Equatable {\n   const DrawEvent();\n \n"
                },
                {
                    "date": 1747316365212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,116 @@\n+import 'package:equatable/equatable.dart';\n+import 'package:flutter/material.dart';\n+import 'package:drawing/draw/model/stroke.dart';\n+import 'package:drawing/draw/model/shape.dart';\n+\n+abstract class DrawEvent extends Equatable {\n+  const DrawEvent();\n+\n+  @override\n+  List<Object?> get props => [];\n+}\n+\n+class LoadDrawing extends DrawEvent {\n+  final String? drawingName;\n+\n+  const LoadDrawing(this.drawingName);\n+\n+  @override\n+  List<Object?> get props => [drawingName];\n+}\n+\n+class StartDrawingStroke extends DrawEvent {\n+  final Offset position;\n+\n+  const StartDrawingStroke(this.position);\n+\n+  @override\n+  List<Object> get props => [position];\n+}\n+\n+class UpdateDrawingStroke extends DrawEvent {\n+  final Offset position;\n+\n+  const UpdateDrawingStroke(this.position);\n+\n+  @override\n+  List<Object> get props => [position];\n+}\n+\n+class EndDrawingStroke extends DrawEvent {\n+  const EndDrawingStroke();\n+}\n+\n+class StartDrawingShape extends DrawEvent {\n+  final Offset position;\n+\n+  const StartDrawingShape(this.position);\n+\n+  @override\n+  List<Object> get props => [position];\n+}\n+\n+class UpdateDrawingShape extends DrawEvent {\n+  final Offset position;\n+\n+  const UpdateDrawingShape(this.position);\n+\n+  @override\n+  List<Object> get props => [position];\n+}\n+\n+class EndDrawingShape extends DrawEvent {\n+  const EndDrawingShape();\n+}\n+\n+class Undo extends DrawEvent {\n+  const Undo();\n+}\n+\n+class Redo extends DrawEvent {\n+  const Redo();\n+}\n+\n+class ChangeColor extends DrawEvent {\n+  final Color color;\n+\n+  const ChangeColor(this.color);\n+\n+  @override\n+  List<Object> get props => [color];\n+}\n+\n+class ChangeBrushSize extends DrawEvent {\n+  final double size;\n+\n+  const ChangeBrushSize(this.size);\n+\n+  @override\n+  List<Object> get props => [size];\n+}\n+\n+class ToggleEraser extends DrawEvent {\n+  const ToggleEraser();\n+}\n+\n+class SelectShapeType extends DrawEvent {\n+  final ShapeType? shapeType;\n+\n+  const SelectShapeType(this.shapeType);\n+\n+  @override\n+  List<Object?> get props => [shapeType];\n+}\n+\n+class SaveDrawing extends DrawEvent {\n+  final String name;\n+\n+  const SaveDrawing(this.name);\n+\n+  @override\n+  List<Object> get props => [name];\n+}\n+\n+class DownloadDrawing extends DrawEvent {\n+  const DownloadDrawing();\n+}\n"
                }
            ],
            "date": 1747314309924,
            "name": "Commit-0",
            "content": "import 'package:equatable/equatable.dart';\nimport 'package:flutter/material.dart';\nimport 'package:drawing/draw/model/stroke.dart';\nimport 'package:drawing/draw/model/shape.dart';\n\nabstract class DrawEvent extends Equatable {\n  const DrawEvent();\n\n  @override\n  List<Object?> get props => [];\n}\n\nclass LoadDrawing extends DrawEvent {\n  final String? drawingName;\n\n  const LoadDrawing(this.drawingName);\n\n  @override\n  List<Object?> get props => [drawingName];\n}\n\nclass StartDrawingStroke extends DrawEvent {\n  final Offset position;\n\n  const StartDrawingStroke(this.position);\n\n  @override\n  List<Object> get props => [position];\n}\n\nclass UpdateDrawingStroke extends DrawEvent {\n  final Offset position;\n\n  const UpdateDrawingStroke(this.position);\n\n  @override\n  List<Object> get props => [position];\n}\n\nclass EndDrawingStroke extends DrawEvent {\n  const EndDrawingStroke();\n}\n\nclass StartDrawingShape extends DrawEvent {\n  final Offset position;\n\n  const StartDrawingShape(this.position);\n\n  @override\n  List<Object> get props => [position];\n}\n\nclass UpdateDrawingShape extends DrawEvent {\n  final Offset position;\n\n  const UpdateDrawingShape(this.position);\n\n  @override\n  List<Object> get props => [position];\n}\n\nclass EndDrawingShape extends DrawEvent {\n  const EndDrawingShape();\n}\n\nclass Undo extends DrawEvent {\n  const Undo();\n}\n\nclass Redo extends DrawEvent {\n  const Redo();\n}\n\nclass ChangeColor extends DrawEvent {\n  final Color color;\n\n  const ChangeColor(this.color);\n\n  @override\n  List<Object> get props => [color];\n}\n\nclass ChangeBrushSize extends DrawEvent {\n  final double size;\n\n  const ChangeBrushSize(this.size);\n\n  @override\n  List<Object> get props => [size];\n}\n\nclass ToggleEraser extends DrawEvent {\n  const ToggleEraser();\n}\n\nclass SelectShapeType extends DrawEvent {\n  final ShapeType? shapeType;\n\n  const SelectShapeType(this.shapeType);\n\n  @override\n  List<Object?> get props => [shapeType];\n}\n\nclass SaveDrawing extends DrawEvent {\n  final String name;\n\n  const SaveDrawing(this.name);\n\n  @override\n  List<Object> get props => [name];\n}\n\nclass DownloadDrawing extends DrawEvent {\n  const DownloadDrawing();\n}"
        }
    ]
}